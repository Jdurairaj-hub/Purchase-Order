// File: client/package.json
{
  "name": "client",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.7.2",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.23.1",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

// File: client/public/index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

// File: client/public/manifest.json
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

// File: client/public/robots.txt
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

// File: client/src/App.js
import './styles/App.css';
import axios from "axios";
import { useEffect, useState } from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import NavBar from './components/NavBar';
import Footer from './components/Footer';
import ListParts from './pages/ListParts';
import ListPurchaseOrders from './pages/ListPOs';
import FindPart from './pages/FindPart';
import FindPO from './pages/FindPO';
import SubmitPurchaseOrder from './pages/SubmitPO';

function App() {


  return (
    <Router>
      <div>
        <NavBar />
        <Routes>
          <Route path="/list-parts" element={<ListParts />} />
          <Route path="/list-purchase-orders" element={<ListPurchaseOrders />} />
          {/* <Route path="/find-part" element={<FindPart />} /> */}
          <Route path="/find-po" element={<FindPO />} />
          <Route path="/submit-purchase-order" element={<SubmitPurchaseOrder />} />
          <Route path="/" element={
            <div className="container">
              <p>Order parts through our website!</p>
              <p>Welcome to the company X website! We are a company that provides tools and you can submit purchase order using the links at the top of the page.</p>
              <p>Click links on top navigation bar to perform the actions.</p>
            </div>
          } />
        </Routes>
        <Footer />
      </div>
    </Router>
  );
}

export default App;

// File: client/src/components/Footer.js
import React from 'react';
import '../styles/Footer.css';

const Footer = () => {
  return (
    <footer className="footer">
      @assignment2_4140
    </footer>
  );
}

export default Footer;

// File: client/src/components/NavBar.js
// src/components/NavBar.js
import React from 'react';
import { Link } from 'react-router-dom';
import '../styles/NavBar.css';

const NavBar = () => {
  return (
    <nav className="navbar">
      <h1><Link to="index.js">CompanyX</Link></h1>
      <ul>
        <li><Link to="/list-parts">List Parts</Link></li>
        <li><Link to="/list-purchase-orders">List Purchase Orders</Link></li>
        {/* <li><Link to="/find-part">Find Part</Link></li> */}
        <li><Link to="/find-po">Find PO</Link></li>
        <li><Link to="/submit-purchase-order">Submit Purchase Order</Link></li>
      </ul>
    </nav>
  );
}

export default NavBar;

// File: client/src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

// File: client/src/pages/FindPO.js
import React from 'react';

const FindPO = () => {
  return (
    <div>
      <h1>Find PO</h1>
      <p>Content for finding a purchase order...</p>
    </div>
  );
}

export default FindPO;
// File: client/src/pages/FindPart.js
import React from 'react';

const FindPart = () => {
  return (
    <div>
      <h1>Find Part</h1>
      <p>Content for finding a part...</p>
    </div>
  );
}

export default FindPart;
// File: client/src/pages/ListPOs.js
import React from 'react';

const ListPurchaseOrders = () => {
  return (
    <div>
      <h1>List Purchase Orders</h1>
      <p>Content for listing purchase orders...</p>
    </div>
  );
}

export default ListPurchaseOrders;
// File: client/src/pages/ListParts.js
import React from 'react';
import axios from 'axios';
import { useEffect, useState } from 'react';
import '../styles/ListParts.css';




const ListParts = () => {

  const [listofParts, setListOfParts] = useState([]);

  useEffect(() => {
    axios.get("http://localhost:3001/parts").then((response) => {
      console.log(response);
      setListOfParts(response.data)
    })
    .catch((error) => {
      console.error('Error fetching parts data:', error);
    });
  }, []);
  

  return (
    <div>
      <h1>List Parts</h1>
      <table >
        <thead>
          <tr>
            <th>Part ID</th>
            <th>Part Name</th>
            <th>Current Price</th>
            <th>Quantity on Hand</th>
          </tr>
        </thead>
        <tbody>
          {listofParts.map((part) => (
            <tr key={part.partNo227}>
              <td>{part.partNo227}</td>
              <td>{part.partName}</td>
              <td>${part.currentPrice}</td>
              <td>{part.qoh227}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default ListParts;
// File: client/src/pages/SubmitPO.js
import React from 'react';

const SubmitPurchaseOrder = () => {
  return (
    <div>
      <h1>Submit Purchase Order</h1>
      <p>Content for submitting a purchase order...</p>
    </div>
  );
}

export default SubmitPurchaseOrder;
// File: client/src/reportWebVitals.js
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

// File: client/src/styles/App.css
.App {
  text-align: center;
}

body {
  margin: 0;
  font-family: 'Roboto', sans-serif;
}

.container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 100vh;
  text-align: center;
}

p {
  margin: 10px 0;
} 

// File: client/src/styles/Footer.css
.footer {
    background-color: black;
    color: white;
    text-align: center;
    padding: 10px 0;
    position: fixed;
    width: 100%;
    bottom: 0;
  }
  
// File: client/src/styles/ListParts.css
table {
    border-collapse: collapse;
    margin: 0 auto;
  }
  
  td {
    border: 1px solid #ddd;
    padding: 5px;
  }
  
  th {
    padding: 5px;
  }
// File: client/src/styles/NavBar.css
/* src/styles/NavBar.css */
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');

.navbar {
  display: flex;
  align-items: center;
  background-color: black;
  padding: 10px;
  font-family: 'Roboto', sans-serif; /* Custom font */
}

.navbar h1 {
  color: white;
  margin-right: auto;
}

.navbar ul {
  list-style: none;
  display: flex;
  margin: 0;
  padding: 0;
}

.navbar li {
  margin: 0 10px;
}

.navbar a {
  color: white;
  text-decoration: none;
  padding: 8px 16px;
}

.navbar a:hover {
  background-color: #555;
  border-radius: 4px;
}

// File: server/config/config.json
{
  "development": {
    "username": "jdurairaj",
    "password": "kZPAmuMxf92q4ihv8wGnrUWhc",
    "database": "jdurairaj",
    "host": "db.cs.dal.ca",
    "dialect": "mysql"
  },
  "test": {
    "username": "root",
    "password": null,
    "database": "database_test",
    "host": "127.0.0.1",
    "dialect": "mysql"
  },
  "production": {
    "username": "root",
    "password": null,
    "database": "database_production",
    "host": "127.0.0.1",
    "dialect": "mysql"
  }
}

// File: server/models/index.js
'use strict';

const fs = require('fs');
const path = require('path');
const Sequelize = require('sequelize');
const process = require('process');
const basename = path.basename(__filename);
const env = process.env.NODE_ENV || 'development';
const config = require(__dirname + '/../config/config.json')[env];
const db = {};

let sequelize;
if (config.use_env_variable) {
  sequelize = new Sequelize(process.env[config.use_env_variable], config);
} else {
  sequelize = new Sequelize(config.database, config.username, config.password, config);
}

fs
  .readdirSync(__dirname)
  .filter(file => {
    return (
      file.indexOf('.') !== 0 &&
      file !== basename &&
      file.slice(-3) === '.js' &&
      file.indexOf('.test.js') === -1
    );
  })
  .forEach(file => {
    const model = require(path.join(__dirname, file))(sequelize, Sequelize.DataTypes);
    db[model.name] = model;
  });

Object.keys(db).forEach(modelName => {
  if (db[modelName].associate) {
    db[modelName].associate(db);
  }
});

db.sequelize = sequelize;
db.Sequelize = Sequelize;

module.exports = db;

// File: server/models/parts.js
module.exports = (sequelize, DataTypes) => {
    const Parts = sequelize.define('Parts', {
      partNo227: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        allowNull: false
      },
      partName: {
        type: DataTypes.STRING,
        allowNull: false
      },
      currentPrice: {
        type: DataTypes.DECIMAL(10, 2),
        allowNull: false
      },
      qoh227: {
        type: DataTypes.INTEGER,
        allowNull: false
      }
    }, {
      tableName: 'Parts227',
      timestamps: false,
      freezeTableName: true
    });
  
    return Parts;
  };
  
// File: server/models/po.js


